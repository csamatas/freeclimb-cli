/* WARNING: This file is automatically generated. Please edit the files in the /generation/commands directory. */
import { Command, flags } from "@oclif/command"
import { Output } from "../../output"
import { FreeClimbApi, FreeClimbResponse } from "../../freeclimb"
import * as Errors from "../../errors"

export class recordingsStream extends Command {
    static description = ` Stream a Recording File. Authentication is required to stream a Recording, as with any other request made to the REST API. The bytes of the WAV audio file with mime-type audio/x-wav are returned as the content of the HTTP response message.`

    static flags = {
        next: flags.boolean({ char: "n", description: "Displays the next page of output." }),
        help: flags.help(),
    }

    static args = [
        {
            name: "recordingId",
            description: "String that uniquely identifies this recording resource.",
            required: true,
        },
    ]

    async run() {
        const out = new Output(this)
        const { args, flags } = (() => {
            try {
                return this.parse(recordingsStream)
            } catch (error) {
                const err = new Errors.ParseError(error)
                this.error(err.message, { exit: err.code })
            }
        })()
        const fcApi = new FreeClimbApi(`Recordings/${args.recordingId}/Stream`, true, this)
        const normalResponse = (response: FreeClimbResponse) => {
            const resp =
                response.status === 204
                    ? "Received a success code from FreeClimb. There is no further output."
                    : JSON.stringify(response.data, null, 2)
            out.out(resp)
        }
        const nextResponse = (response: FreeClimbResponse) => {
            out.out(JSON.stringify(response.data, null, 2))
            if (out.next === null) {
                out.out("== You are on the last page of output. ==")
            }
        }

        if (flags.next) {
            if (out.next === undefined || out.next === "freeclimbUnnamedTest") {
                const error = new Errors.NoNextPage()
                this.error(error.message, { exit: error.code })
            } else {
                await fcApi.apiCall("GET", { params: { cursor: out.next } }, nextResponse)
            }
            return
        }

        await fcApi.apiCall("GET", {}, normalResponse)
    }
}
